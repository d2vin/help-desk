// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Ticket {
    id          Int    @id @default(autoincrement())
    name        String
    email       String
    description String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(name: "CreatedByUser", fields: [createdById], references: [id])
    createdById String

    recipient   User   @relation(name: "RecipientUser", fields: [recipientId], references: [id])
    recipientId String

    replies Reply[] @relation(name: "ReplyToTicket")

    status String @default("New")

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id             String    @id @default(cuid())
    name           String?
    email          String?   @unique
    emailVerified  DateTime?
    image          String?
    recipient      Boolean   @default(false)
    accounts       Account[]
    sessions       Session[]
    tickets        Ticket[]  @relation(name: "CreatedByUser")
    inboundTickets Ticket[]  @relation(name: "RecipientUser")
    replies        Reply[]   @relation(name: "ReplyByUser")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Reply {
    id          Int      @id @default(autoincrement())
    message     String
    ticket      Ticket   @relation(name: "ReplyToTicket", fields: [ticketId], references: [id])
    ticketId    Int
    createdBy   User     @relation(name: "ReplyByUser", fields: [createdById], references: [id])
    createdById String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}
